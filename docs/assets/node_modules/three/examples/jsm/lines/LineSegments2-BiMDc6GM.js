import"../../../build/three.module-DDr6UARD.js";import{LineSegmentsGeometry as V}from"./LineSegmentsGeometry-DWtt5PVF.js";import{LineMaterial as q}from"./LineMaterial-BidIivRo.js";import{Mesh as N,Vector3 as w,InstancedInterleavedBuffer as R,InterleavedBufferAttribute as I,Sphere as F,Box3 as G,Vector4 as B,Line3 as H,Matrix4 as k,MathUtils as J}from"../../../build/three.core-BhFki44V.js";const L=new B,j=new w,C=new w,i=new B,r=new B,x=new B,T=new w,W=new k,o=new H,D=new w,z=new G,_=new F,y=new B;let h,S;function E(u,e,n){return y.set(0,0,-e,1).applyMatrix4(u.projectionMatrix),y.multiplyScalar(1/y.w),y.x=S/n.width,y.y=S/n.height,y.applyMatrix4(u.projectionMatrixInverse),y.multiplyScalar(1/y.w),Math.abs(Math.max(y.x,y.y))}function K(u,e){const n=u.matrixWorld,a=u.geometry,s=a.attributes.instanceStart,c=a.attributes.instanceEnd,l=Math.min(a.instanceCount,s.count);for(let t=0,p=l;t<p;t++){o.start.fromBufferAttribute(s,t),o.end.fromBufferAttribute(c,t),o.applyMatrix4(n);const f=new w,m=new w;h.distanceSqToSegment(o.start,o.end,m,f),m.distanceTo(f)<S*.5&&e.push({point:m,pointOnLine:f,distance:h.origin.distanceTo(m),object:u,face:null,faceIndex:t,uv:null,uv1:null})}}function Q(u,e,n){const a=e.projectionMatrix,c=u.material.resolution,l=u.matrixWorld,t=u.geometry,p=t.attributes.instanceStart,f=t.attributes.instanceEnd,m=Math.min(t.instanceCount,p.count),d=-e.near;h.at(1,x),x.w=1,x.applyMatrix4(e.matrixWorldInverse),x.applyMatrix4(a),x.multiplyScalar(1/x.w),x.x*=c.x/2,x.y*=c.y/2,x.z=0,T.copy(x),W.multiplyMatrices(e.matrixWorldInverse,l);for(let M=0,P=m;M<P;M++){if(i.fromBufferAttribute(p,M),r.fromBufferAttribute(f,M),i.w=1,r.w=1,i.applyMatrix4(W),r.applyMatrix4(W),i.z>d&&r.z>d)continue;if(i.z>d){const b=i.z-r.z,g=(i.z-d)/b;i.lerp(r,g)}else if(r.z>d){const b=r.z-i.z,g=(r.z-d)/b;r.lerp(i,g)}i.applyMatrix4(a),r.applyMatrix4(a),i.multiplyScalar(1/i.w),r.multiplyScalar(1/r.w),i.x*=c.x/2,i.y*=c.y/2,r.x*=c.x/2,r.y*=c.y/2,o.start.copy(i),o.start.z=0,o.end.copy(r),o.end.z=0;const v=o.closestPointToPointParameter(T,!0);o.at(v,D);const A=J.lerp(i.z,r.z,v),O=A>=-1&&A<=1,U=T.distanceTo(D)<S*.5;if(O&&U){o.start.fromBufferAttribute(p,M),o.end.fromBufferAttribute(f,M),o.start.applyMatrix4(l),o.end.applyMatrix4(l);const b=new w,g=new w;h.distanceSqToSegment(o.start,o.end,g,b),n.push({point:g,pointOnLine:b,distance:h.origin.distanceTo(g),object:u,face:null,faceIndex:M,uv:null,uv1:null})}}}class et extends N{constructor(e=new V,n=new q({color:Math.random()*16777215})){super(e,n),this.isLineSegments2=!0,this.type="LineSegments2"}computeLineDistances(){const e=this.geometry,n=e.attributes.instanceStart,a=e.attributes.instanceEnd,s=new Float32Array(2*n.count);for(let l=0,t=0,p=n.count;l<p;l++,t+=2)j.fromBufferAttribute(n,l),C.fromBufferAttribute(a,l),s[t]=t===0?0:s[t-1],s[t+1]=s[t]+j.distanceTo(C);const c=new R(s,2,1);return e.setAttribute("instanceDistanceStart",new I(c,1,0)),e.setAttribute("instanceDistanceEnd",new I(c,1,1)),this}raycast(e,n){const a=this.material.worldUnits,s=e.camera;s===null&&!a&&console.error('LineSegments2: "Raycaster.camera" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.');const c=e.params.Line2!==void 0&&e.params.Line2.threshold||0;h=e.ray;const l=this.matrixWorld,t=this.geometry,p=this.material;S=p.linewidth+c,t.boundingSphere===null&&t.computeBoundingSphere(),_.copy(t.boundingSphere).applyMatrix4(l);let f;if(a)f=S*.5;else{const d=Math.max(s.near,_.distanceToPoint(h.origin));f=E(s,d,p.resolution)}if(_.radius+=f,h.intersectsSphere(_)===!1)return;t.boundingBox===null&&t.computeBoundingBox(),z.copy(t.boundingBox).applyMatrix4(l);let m;if(a)m=S*.5;else{const d=Math.max(s.near,z.distanceToPoint(h.origin));m=E(s,d,p.resolution)}z.expandByScalar(m),h.intersectsBox(z)!==!1&&(a?K(this,n):Q(this,s,n))}onBeforeRender(e){const n=this.material.uniforms;n&&n.resolution&&(e.getViewport(L),this.material.uniforms.resolution.value.set(L.z,L.w))}}export{et as LineSegments2};
