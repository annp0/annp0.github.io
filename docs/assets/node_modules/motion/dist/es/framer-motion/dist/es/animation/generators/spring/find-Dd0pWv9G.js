import{millisecondsToSeconds as N,secondsToMilliseconds as S}from"../../../../../../motion-utils/dist/es/time-conversion-Dn12LHp6.js";import{clamp as h}from"../../../utils/clamp-CAH81aju.js";import{springDefaults as n}from"./defaults-4mL7dOmJ.js";const g=.001;function k({duration:t=n.duration,bounce:p=n.bounce,velocity:a=n.velocity,mass:o=n.mass}){let i,r,e=1-p;e=h(n.minDamping,n.maxDamping,e),t=h(n.minDuration,n.maxDuration,N(t)),e<1?(i=s=>{const f=s*e,c=f*t,l=f-a,m=D(s,e),M=Math.exp(-c);return g-l/m*M},r=s=>{const c=s*e*t,l=c*a+a,m=Math.pow(e,2)*Math.pow(s,2)*t,M=Math.exp(-c),w=D(Math.pow(s,2),e);return(-i(s)+g>0?-1:1)*((l-m)*M)/w}):(i=s=>{const f=Math.exp(-s*t),c=(s-a)*t+1;return-.001+f*c},r=s=>{const f=Math.exp(-s*t),c=(a-s)*(t*t);return f*c});const b=5/t,x=A(i,r,b);if(t=S(t),isNaN(x))return{stiffness:n.stiffness,damping:n.damping,duration:t};{const s=Math.pow(x,2)*o;return{stiffness:s,damping:e*2*Math.sqrt(o*s),duration:t}}}const T=12;function A(t,p,a){let o=a;for(let i=1;i<T;i++)o=o-t(o)/p(o);return o}function D(t,p){return t*Math.sqrt(1-p*p)}export{D as calcAngularFreq,k as findSpring};
